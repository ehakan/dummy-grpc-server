// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: greeter/greeter.proto

package greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DummyGreeterClient is the client API for DummyGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DummyGreeterClient interface {
	// Unary request/response
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// Streaming request/response
	StreamGreetings(ctx context.Context, opts ...grpc.CallOption) (DummyGreeter_StreamGreetingsClient, error)
}

type dummyGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewDummyGreeterClient(cc grpc.ClientConnInterface) DummyGreeterClient {
	return &dummyGreeterClient{cc}
}

func (c *dummyGreeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/greeter.DummyGreeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyGreeterClient) StreamGreetings(ctx context.Context, opts ...grpc.CallOption) (DummyGreeter_StreamGreetingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DummyGreeter_ServiceDesc.Streams[0], "/greeter.DummyGreeter/StreamGreetings", opts...)
	if err != nil {
		return nil, err
	}
	x := &dummyGreeterStreamGreetingsClient{stream}
	return x, nil
}

type DummyGreeter_StreamGreetingsClient interface {
	Send(*GreetingRequest) error
	Recv() (*GreetingResponse, error)
	grpc.ClientStream
}

type dummyGreeterStreamGreetingsClient struct {
	grpc.ClientStream
}

func (x *dummyGreeterStreamGreetingsClient) Send(m *GreetingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dummyGreeterStreamGreetingsClient) Recv() (*GreetingResponse, error) {
	m := new(GreetingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DummyGreeterServer is the server API for DummyGreeter service.
// All implementations must embed UnimplementedDummyGreeterServer
// for forward compatibility
type DummyGreeterServer interface {
	// Unary request/response
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	// Streaming request/response
	StreamGreetings(DummyGreeter_StreamGreetingsServer) error
	mustEmbedUnimplementedDummyGreeterServer()
}

// UnimplementedDummyGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedDummyGreeterServer struct {
}

func (UnimplementedDummyGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedDummyGreeterServer) StreamGreetings(DummyGreeter_StreamGreetingsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGreetings not implemented")
}
func (UnimplementedDummyGreeterServer) mustEmbedUnimplementedDummyGreeterServer() {}

// UnsafeDummyGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummyGreeterServer will
// result in compilation errors.
type UnsafeDummyGreeterServer interface {
	mustEmbedUnimplementedDummyGreeterServer()
}

func RegisterDummyGreeterServer(s grpc.ServiceRegistrar, srv DummyGreeterServer) {
	s.RegisterService(&DummyGreeter_ServiceDesc, srv)
}

func _DummyGreeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyGreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greeter.DummyGreeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyGreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DummyGreeter_StreamGreetings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DummyGreeterServer).StreamGreetings(&dummyGreeterStreamGreetingsServer{stream})
}

type DummyGreeter_StreamGreetingsServer interface {
	Send(*GreetingResponse) error
	Recv() (*GreetingRequest, error)
	grpc.ServerStream
}

type dummyGreeterStreamGreetingsServer struct {
	grpc.ServerStream
}

func (x *dummyGreeterStreamGreetingsServer) Send(m *GreetingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dummyGreeterStreamGreetingsServer) Recv() (*GreetingRequest, error) {
	m := new(GreetingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DummyGreeter_ServiceDesc is the grpc.ServiceDesc for DummyGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DummyGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.DummyGreeter",
	HandlerType: (*DummyGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _DummyGreeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGreetings",
			Handler:       _DummyGreeter_StreamGreetings_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greeter/greeter.proto",
}
